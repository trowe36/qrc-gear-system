generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model applications {
  ID                    Int       @id @default(autoincrement())
  firstname             String    @db.Text
  lastname              String?   @db.Text
  gender                String?   @db.Text
  dob                   DateTime? @db.Date
  email                 String    @unique(map: "email_UNIQUE") @db.VarChar(255)
  phone                 String?   @db.Text
  street                String?   @db.Text
  suburb                String?   @db.Text
  country               String?   @db.Text
  state                 String?   @db.Text
  postcode              Int?
  student_status        Int?
  student_id            String?   @db.Text
  student_international Int?
  em_name               String?   @db.Text
  em_phone              String?   @db.Text
  password              String?   @db.VarChar(255)
  hear                  String?   @db.Text
  student_duration      Int?
  brisbane_duration     Int?
  experience            Int?
  has_car               Int?
  help_setting          Int?
  kp_attendance         Int?
  weekend_attendance    Int?
  justification         String?   @db.LongText
  status                String?   @db.VarChar(1)
  points                Int?
  date_submitted        DateTime? @db.Date
}

model logbook_signoffs {
  id                 Int       @id @default(autoincrement())
  member_id          Int
  skill_id           Int
  guide_id           Int
  submitted_time     DateTime  @db.Date
  status             String    @db.VarChar(1)
  approved_time      DateTime? @db.Date
  skills_coord_notes String?   @db.LongText
}

model logbook_skills {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  skill_set   Int?
  skill_name  String? @db.Text
  guide_level Int?
  prereqs     String? @db.Text
}

model members {
  ID                    Int           @id @default(autoincrement())
  firstname             String        @db.Text
  lastname              String        @db.Text
  forum_username        String?       @db.Text
  gender                String?       @db.Text
  dob                   DateTime?     @db.Date
  email                 String        @unique(map: "email_UNIQUE") @default("") @db.VarChar(255)
  phone                 String?       @db.Text
  street                String?       @db.Text
  suburb                String?       @db.Text
  country               String?       @db.Text
  state                 String?       @db.Text
  postcode              Int?
  student_status        Int?
  student_id            String?       @db.Text
  student_international Int?
  em_name               String?       @db.Text
  em_phone              String?       @db.Text
  signup_id             Int?
  status                String?       @db.VarChar(1)
  member_since          DateTime?     @db.Date
  expire                DateTime?     @db.Date
  password              String?       @default("") @db.VarChar(255)
  role                  String?       @db.VarChar(1)
  waiver_path           String?       @db.VarChar(1024)
  medical_info          medical_info?
  opt_out               opt_out?
}

model seconder_logs {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  skill_id    Int
  member_id   Int
  subskill_id Int
  guide_id    Int
  time        DateTime @db.Date
}

model tr_logs {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  skill_id    Int
  climb       String   @db.Text
  anchor      String   @db.Text
  member_id   Int
  observer_id Int
  time        DateTime @db.Date
  errors      String?  @db.LongText
}

model trip_signups {
  id                   Int       @id @default(autoincrement()) @db.UnsignedInt
  trip_id              Int?
  climber_id           Int?
  date_from            DateTime? @db.Date
  date_to              DateTime? @db.Date
  driving              Int?
  driving_space        Int?
  first_aid            Int?
  camping_requirements String?   @db.Text
  comments             String?   @db.Text
  convoy               Int?
  gear_needs           String?   @db.Text
  dietary_requirements String?   @db.Text
  shirt_size           String?   @db.Text
}

model trips {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  name         String?   @db.Text
  description  String?   @db.LongText
  date_from    DateTime? @db.Date
  date_to      DateTime? @db.Date
  camping_trip Int?
  crag         String?   @db.Text
  signup_close DateTime? @db.DateTime(0)
}

model gear {
  id                  Int     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  category            String  @db.VarChar(45)
  date_entered        String  @db.VarChar(45)
  admin               String  @db.VarChar(45)
  remaining_life      Int
  quality             Int
  signoff_required    String  @db.VarChar(45)
  status              String  @db.VarChar(45)
  parent_ID           Int?
  location            String  @db.VarChar(45)
  comments            String? @db.VarChar(45)
  borrow_count        Int?
  current_borrower_ID Int?
  code                String? @db.VarChar(255)
  name                String? @db.VarChar(45)
  available_date      String? @db.VarChar(45)
}

model gear_orders {
  id            Int
  date_ordered  String  @db.VarChar(45)
  return_date   String  @db.VarChar(45)
  user_id       String  @db.VarChar(45)
  pick_location String? @db.VarChar(45)
  pickup_date   String? @db.VarChar(45)
  status        String? @db.VarChar(45)

  @@id([id, user_id])
}

model medical_info {
  ID          Int     @id
  history     String? @db.VarChar(256)
  symptoms    String? @db.VarChar(256)
  length      String? @db.VarChar(256)
  control     String? @db.VarChar(256)
  medications String? @db.VarChar(256)
  carry       String? @db.VarChar(256)
  other       String? @db.VarChar(256)
  members     members @relation(fields: [ID], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "medical_info_ibfk_1")
}

model opt_out {
  member_id Int      @id
  media     Boolean?
  members   members  @relation(fields: [member_id], references: [ID], onDelete: Cascade, map: "FK_member_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model signoff_records {
  firstname String @db.Text
  lastname  String @db.Text

  @@ignore
}

model user {
  id        Int    @id @default(autoincrement())
  firstName String @db.VarChar(255)
  lastName  String @db.VarChar(255)
  age       Int
}
